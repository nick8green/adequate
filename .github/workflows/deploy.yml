name: deploy applications

on:
  push:
    branches: [release]
  workflow_dispatch:
    inputs:
      app:
        description: 'App to deploy'
        required: true
        type: choice
        default: ''
        options: [admin, app, service]
      version:
        description: 'Version to deploy'
        required: true
        type: string
        default: 'latest'

jobs:
  configure:
    name: ⏳ initialize workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: generate deployment matrix
        id: set-matrix
        run: |
          ref="${{ github.ref }}"
          branch="${ref##*/}"
          manual_app="${{ github.event.inputs.app }}"
          manual_version="${{ github.event.inputs.version }}"
          mkdir -p tmp_matrix
          > tmp_matrix/entries.json

          build_entry() {
            local app=$1
            local version=$2
            ./.github/scripts/resolve-matrix-entry.sh "$app" "$version" "$branch" >> tmp_matrix/entries.json
          }

          if [ -n "$manual_app" ]; then
            build_entry "$manual_app" "$manual_version"
          else
            before="${{ github.event.before }}"
            sha="${{ github.sha }}"
            base_commit=$(git cat-file -e "$before^{commit}" 2>/dev/null && echo "$before" || git rev-parse HEAD~1)
            changed_apps=$(git diff --name-only "$base_commit" "$sha" | grep '^apps/' | cut -d/ -f2 | sort -u)

            for app in $changed_apps; do
              if [[ -f "apps/$app/Dockerfile" && -f "apps/$app/package.json" ]]; then
                version=$(jq -r .version "apps/$app/package.json")
                build_entry "$app" "$version"
              fi
            done
          fi

          entries=$(paste -sd, tmp_matrix/entries.json)
          if [[ -z "$entries" ]]; then
            echo "matrix=" >> "$GITHUB_OUTPUT"
          else
            echo "matrix={\"include\": [${entries}]}" >> "$GITHUB_OUTPUT"
          fi
        env:
          APP_PORT_ADMIN: ${{ vars.APP_PORT_ADMIN }}
          APP_PORT_APP: ${{ vars.APP_PORT_APP }}
          APP_PORT_SERVICE: ${{ vars.APP_PORT_SERVICE }}
          APP_OPTIONS_ADMIN: ${{ vars.APP_OPTIONS_ADMIN }}
          APP_OPTIONS_APP: ${{ vars.APP_OPTIONS_APP }}
          APP_OPTIONS_SERVICE: ${{ vars.APP_OPTIONS_SERVICE }}

  deploy:
    name: 🚀 deploy ${{ matrix.app }}
    needs: configure
    if: ${{ needs.configure.outputs.matrix != '' }}
    strategy:
      matrix: ${{ fromJson(needs.configure.outputs.matrix) }}
    uses: nick8green/workflows/.github/workflows/docker-deploy.yml@main
    with:
      image: ghcr.io/nick8green/adequate-${{ matrix.app }}
      name: adequate-${{ matrix.app }}
      options: >-
        -p ${{ matrix.port }}:3000
        --log-driver=json-file
        --log-opt max-size=10m
        --log-opt max-file=3
        ${{ matrix.options }}
      version: ${{ matrix.version }}
    secrets:
      host: ${{ secrets.DEPLOY_HOST }}
      network: ${{ secrets.DOCKER_NETWORK }}
      user: ${{ secrets.DEPLOY_USER }}
      key: ${{ secrets.DEPLOY_KEY }}
      token: ${{ secrets.DEPLOY_IMAGE_TOKEN }}

  create-pr:
    name: 📨 create pr to main
    needs: deploy
    if: endsWith(github.ref, 'refs/heads/release')
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: create pr
        uses: devops-infra/action-pull-request@v0.6.0
        with:
          github_token: ${{ secrets.GH_PR_TOKEN }}
          label: automatic
          source_branch: release
          target_branch: main
          title: Latest Release
          body: "**Automated Pull Request**"
          draft: false
          get_diff: true
