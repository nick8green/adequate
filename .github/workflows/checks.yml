name: build checks for application

on:
  workflow_call:
    inputs:
      scan:
        description: 'Run security scan'
        default: true
        type: boolean
    secrets:
      SNYK_TOKEN:
        required: false
        description: 'Snyk API token for security checks'
      GH_TOKEN:
        required: true
        description: 'GitHub token for actions that require authentication'
      SONAR_TOKEN:
        required: false
        description: 'SonarQube token for code quality checks'
  workflow_dispatch:
    inputs:
      scan:
        description: 'Run security scan'
        default: true
        type: boolean
  pull_request:
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/checks.yml'
    types:
      - opened
      - synchronize
      - reopened

concurrency:
  group: adequate-checks
  cancel-in-progress: true

jobs:
  debugging:
    runs-on: ubuntu-latest
    steps:
      - name: Check if GH_TOKEN is set
        if: ${{ env.GH_TOKEN != '' }}
        run: echo "GH_TOKEN is available"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Check if GH_PACKAGES_TOKEN is set
        if: ${{ env.GH_PACKAGES_TOKEN != '' }}
        run: echo "GH_PACKAGES_TOKEN is available"
        env:
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}

  # run unit tests
  test:
    name: üß™ unit tests
    uses: ./.github/workflows/unit-test.yml
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GH_PACKAGES_TOKEN }}
      GIST_TOKEN: ${{ secrets.GIST_TOKEN }}

  # lint code
  linting:
    name: ‚úèÔ∏è lint code
    uses: nick8green/workflows/.github/workflows/node-inspect.yml@main
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GH_PACKAGES_TOKEN }}

  security:
    runs-on: ubuntu-latest
    if: ${{ inputs.scan == true }}
    name: üîç check image for vulnerabilities
    steps:
      - name: üõéÔ∏è checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîí Check if SNYK_TOKEN is set
        if: ${{ env.SNYK_TOKEN != '' }}
        run: echo "SNYK_TOKEN is available"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üïµ Run Snyk to check Docker image for vulnerabilities
        if: ${{ env.SNYK_TOKEN != '' }}
        # continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk }}
        with:
          args: --sarif-file-output=snyk.sarif

      - name: üíæ Upload result to GitHub Code Scanning
        if: ${{ env.SNYK_TOKEN != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  sonarqube:
    name: ‚å®Ô∏è SonarQube
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîí Check if SONAR_TOKEN is set
        if: ${{ env.SONAR_TOKEN != '' }}
        run: echo "SONAR_TOKEN is available"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: download all coverage artifacts
        if: ${{ env.SONAR_TOKEN != '' }}
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - if: ${{ env.SONAR_TOKEN != '' }}
        run: |
          echo "Merged coverage report downloaded:"
          ls -la coverage
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
